## defaults ############################################################################################################
workflow.global_resources["api_requests"] = workflow.global_resources.get("api_requests", 2)
workflow.global_resources["mem_gb"] = workflow.global_resources.get("mem_gb", 100)
## print(workflow.global_resources)


## 1st level of config variable definition: config.yaml ################################################################
configfile: "config/config.yaml"


## 2nd level of config variable definition: snakemake command line args (overwrites previous definitions) ##############


## 3rd level of config variable definition: Snakefile (overwrites previous definitions) ################################


## outdir
try:
    results = config["outdir"]
except:
    config["outdir"] = "results/data_repo" # for default in e.g. a module


## fix gtf release
for name in config["ref"].keys():
    try:
        config["ref"][name]["gtf"]
    except:
        config["ref"][name]["gtf"] = config["ref"][name]["release"]

## config ##############################################################################################################

print("{:#^60}".format(" Config "))
print(json.dumps(config, sort_keys=True, indent=4))


## include #############################################################################################################
include: "rules/general.smk"
include: "rules/GRC.smk"
include: "rules/T2T.smk"


## variables ###########################################################################################################

results = config["outdir"]
names = config["ref"].keys()
names_GRC = [ x for x in config["ref"].keys() if x.startswith("GRC") ]
names_T2T = [ x for x in config["ref"].keys() if x.startswith("T2T") ]


print("{:#^60}".format(" Variables "))
print(f"names: {names} {len(names)}")
print(f"names_GRC: {names_GRC} {len(names_GRC)}")
print(f"names_T2T: {names_T2T} {len(names_T2T)}")

## wildcard constraints ################################################################################################

wildcard_constraints:
    build="[\w-]+",
    release="\d+"


## snakemake: all ######################################################################################################

print("{:#^60}".format(" Workflow "))


## GRC ##

def GRC_get_genome_output(wildcards):
    paths = []
    for name in names_GRC:
        paths.extend(
            expand(
                "{results}/{name}/genome/{build}.{release}.genome.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
                ext=["fa", "fa.fai"],
            )
        )
    return paths


def GRC_get_cdna_output(wildcards):
    paths = []
    for name in names_GRC:
        paths.extend(
            expand(
                "{results}/{name}/genome/{build}.{release}.cdna.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
                ext=["fa",],
            )
        )
    return paths


def get_genome_gatk_dict_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/genome/{build}.{release}.genome.dict",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
            )
        )
    return paths


# def get_annotation_output(wildcards):
#     paths = []
#     for name in names_GRC:
#         paths.extend(
#             expand(
#                 "{results}/{name}/annotation/{build}.{release}.gtf",
#                 results=results,
#                 name=name,
#                 build=config["ref"][name]["build"],
#                 release=config["ref"][name]["gtf"],
#             )
#         )
#     return paths


def bgzip_gtf_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
                ext=["gtf.gz", "gtf.gz.tbi"]
            )
        )
    return paths


def gtf2bed_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.bed",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2genes_bed_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.genes.bed",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2genes_saf_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.genes.saf",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2ids_tsv_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.ids.tsv",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def bwa_mem2_index_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/index/bwa-mem2/{build}.{release}.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
                ext=["0123", "amb", "ann", "bwt.2bit.64", "pac"]
            )
        )
    return paths


## T2T ##

def T2T_get_genome_output(wildcards):
    paths = []
    for name in names_T2T:
        paths.extend(
            expand("{results}/{name}/genome/{build}.{release}.genome.{ext}",
                results=results,
                name=names_T2T,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
                ext=["fa", "fa.fai"],
            )
        )
    return paths


def T2T_get_chromosome_alias(wildcards):
    paths = []
    for name in names_T2T:
        paths.extend(
            expand("{results}/{name}/genome/{build}.{release}.chromosome_alias.tsv",
                results=results,
                name=names_T2T,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
            )
        )
    return paths

## temp
## def T2T_get_annotation_gtf(wildcards):
##     paths = []
##     for name in names_T2T:
##         paths.extend(
##             expand("{results}/{name}/annotation/{build}.{release}.{ext}",
##                 results=results,
##                 name=names_T2T,
##                 build=config["ref"][name]["build"],
##                 release=config["ref"][name]["release"],
##                 ext=["gtf",],
##             )
##         )
##     return paths


## all #################################################################################################################

rule all:
    input:
        ## general
        get_genome_gatk_dict_output,
        bgzip_gtf_output,
        gtf2bed_output,
        gtf2genes_bed_output,
        gtf2genes_saf_output,
        gtf2ids_tsv_output,
        bwa_mem2_index_output,

        ## GRC ##
        GRC_get_genome_output,
        GRC_get_cdna_output,
        ## get_annotation_output, # temp

        ## T2T ##
        T2T_get_genome_output,
        T2T_get_chromosome_alias,
        ## T2T_get_annotation_gtf, # temp

