## defaults ############################################################################################################
workflow.global_resources["api_requests"] = workflow.global_resources.get("api_requests", 2)
workflow.global_resources["mem_gb"] = workflow.global_resources.get("mem_gb", 100)
## print(workflow.global_resources)


## 1st level of config variable definition: config.yaml ################################################################
configfile: "config/config.yaml"


## 2nd level of config variable definition: snakemake command line args (overwrites previous definitions) ##############


## 3rd level of config variable definition: Snakefile (overwrites previous definitions) ################################


## outdir
try:
    results = config["outdir"]
except:
    config["outdir"] = "results/data_repo" # for default in e.g. a module


## fix gtf release
for name in config["ref"].keys():
    try:
        config["ref"][name]["gtf"]
    except:
        config["ref"][name]["gtf"] = config["ref"][name]["release"]

## config ##############################################################################################################

print("{:#^60}".format(" Config "))
print(json.dumps(config, sort_keys=True, indent=4))


## include #############################################################################################################

## variables ###########################################################################################################

results = config["outdir"]
names = config["ref"].keys()


## wildcard constraints ################################################################################################

wildcard_constraints:
    build="\w+",
    release="\d+"


## snakemake: all ######################################################################################################

print("{:#^60}".format(" Workflow "))


def get_genome_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/genome/{build}.{release}.genome.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
                ext=["fa", "fa.fai"],
            )
        )
    return paths


def get_cdna_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/genome/{build}.{release}.cdna.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["release"],
                ext=["fa",],
            )
        )
    return paths


def get_annotation_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.gtf",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def bgzip_gtf_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
                ext=["gtf.gz", "gtf.gz.tbi"]
            )
        )
    return paths


def gtf2bed_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.bed",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2genes_bed_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.genes.bed",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2genes_saf_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.genes.saf",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def gtf2ids_tsv_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/annotation/{build}.{release}.ids.tsv",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
            )
        )
    return paths


def bwa_mem2_index_output(wildcards):
    paths = []
    for name in names:
        paths.extend(
            expand(
                "{results}/{name}/index/bwa-mem2/{build}.{release}.{ext}",
                results=results,
                name=name,
                build=config["ref"][name]["build"],
                release=config["ref"][name]["gtf"],
                ext=["0123", "amb", "ann", "bwt.2bit.64", "pac"]
            )
        )
    return paths


rule all:
    input:
        get_genome_output,
        get_cdna_output,
        ## get_annotation_output, # temp
        bgzip_gtf_output,
        gtf2bed_output,
        gtf2genes_bed_output,
        gtf2genes_saf_output,
        gtf2ids_tsv_output,
        bwa_mem2_index_output,


## rules ###############################################################################################################

## genome ##

rule get_genome:
    output:
        "{results}/{name}/genome/{build}.{release}.genome.fa"
    params:
        species=lambda wildcards: config["ref"][wildcards.name]["species"],
        datatype="dna",
        build=lambda wildcards: config["ref"][wildcards.name]["build"],
        release=lambda wildcards: config["ref"][wildcards.name]["release"],
    log:
        "{results}/{name}/logs/get_genome.{build}.{release}.log"
    cache:
        True  # save space and time with between workflow caching (see docs)
    resources:
        api_requests=1
    wrapper:
        "v1.4.0/bio/reference/ensembl-sequence"


rule genome_index:
    input:
        "{results}/{name}/genome/{build}.{release}.genome.fa"
    output:
        "{results}/{name}/genome/{build}.{release}.genome.fa.fai"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools faidx {input} "


rule get_cdna:
    output:
        "{results}/{name}/genome/{build}.{release}.cdna.fa"
    params:
        species=lambda wildcards: config["ref"][wildcards.name]["species"],
        datatype="cdna",
        build=lambda wildcards: config["ref"][wildcards.name]["build"],
        release=lambda wildcards: config["ref"][wildcards.name]["release"],
    log:
        "{results}/{name}/logs/get_cdna.{build}.{release}.log"
    cache:
        True  # save space and time with between workflow caching (see docs)
    resources:
        api_requests=1
    wrapper:
        "v1.4.0/bio/reference/ensembl-sequence"


## annotation ##

rule get_annotation:
    output:
        temp("{results}/{name}/annotation/{build}.{release}.gtf"),
    params:
        species=lambda wildcards: config["ref"][wildcards.name]["species"],
        release=lambda wildcards: config["ref"][wildcards.name]["gtf"],
        build=lambda wildcards: config["ref"][wildcards.name]["build"],
        flavor="",  # optional, e.g. chr_patch_hapl_scaff, see Ensembl FTP.
    log:
        "{results}/{name}/logs/get_annotation.{build}.{release}.log",
    cache: True  # save space and time with between workflow caching (see docs)
    resources:
        api_requests=1
    wrapper:
        "v1.4.0/bio/reference/ensembl-annotation"


rule bgzip_gtf:
    input:
        "{results}/{name}/annotation/{build}.{release}.gtf"
    output:
        gtf="{results}/{name}/annotation/{build}.{release}.gtf.gz",
        tbi="{results}/{name}/annotation/{build}.{release}.gtf.gz.tbi"
    conda:
        "envs/tabix.yaml"
    shell:
        "( "
        "grep '^#' {input}; "
        "grep -v '^#' {input} "
        "| sort -k1,1 -k4,4n "
        ") "
        "| bgzip "
        ">{output.gtf} "
        "&& tabix -p gff {output.gtf} "


rule gtf2bed:
    input:
        "{results}/{name}/annotation/{build}.{release}.gtf.gz"
    output:
        "{results}/{name}/annotation/{build}.{release}.bed"
    conda:
        "envs/ucsc.yaml"
    shell:
        "zcat {input} "
        """| awk '{{if ($3!="gene") print $0}}' """
        "| grep -v '^#' "
        "| gtfToGenePred stdin stdout "
        ##"| gtfToGenePred -genePredExt stdin stdout "
        ##"| gtfToGenePred -geneNameAsName2 -genePredExt stdin stdout "
        ##"""| awk '{{symbol=$12; if (symbol!="none") $1=$1"-"symbol; print $0}}' """
        "| genePredToBed stdin {output} "


rule gtf2genes_bed:
    input:
        "{results}/{name}/annotation/{build}.{release}.gtf.gz"
    output:
        "{results}/{name}/annotation/{build}.{release}.genes.bed"
    shell:
        "zcat {input} "
        """| awk '{{if ($3=="gene") print $0}}' """
        """| awk 'BEGIN{{OFS="\t"}}{{ """
        """match($0,/gene_id "([a-zA-Z0-9_-]+)"/,gene_id); """
        """match($0,/gene_name "([a-zA-Z0-9_-]+)"/,symbol); """
        """name=gene_id[1]; """
        """if (symbol[1]!="") name=name"-"symbol[1]; """
        """print $1, $4-1, $5, name, 0, $7}}' """
        ">{output} "


rule bed2genes_saf:
    input:
        "{results}/{name}/annotation/{build}.{release}.genes.bed"
    output:
        "{results}/{name}/annotation/{build}.{release}.genes.saf"
    shell:
        "( "
        "echo -e 'GeneID\tChr\tStart\tEnd\tStrand'; "
        "cat {input} "
        """| awk 'BEGIN{{OFS="\t"}}{{print $4, $1, $2, $3, $6}}' """
        ") "
        ">{output} "


rule gtf2id_tsv:
    input:
        "{results}/{name}/annotation/{build}.{release}.gtf.gz"
    output:
        "{results}/{name}/annotation/{build}.{release}.ids.tsv"
    conda:
        "envs/ucsc.yaml"
    shell:
        "zcat {input} "
        """| awk '{{if ($3!="gene") print $0}}' """
        """| awk 'BEGIN{{OFS="\t"}}{{ """
        """match($0,/transcript_id "([a-zA-Z0-9_-]+)"/,transcript_id); """
        """match($0,/gene_id "([a-zA-Z0-9_-]+)"/,gene_id); """
        """match($0,/gene_name "([a-zA-Z0-9_-]+)"/,symbol); """
        """name=gene_id[1]; """
        """print transcript_id[1], gene_id[1], symbol[1]}}' """
        "| sed '/^\s*$/d' " # delete empty line
        "| sort -u "
        ">{output} "


## index ##

rule bwa_mem2_index:
    input:
        "{results}/{name}/genome/{build}.{release}.genome.fa"
    output:
        "{results}/{name}/index/bwa-mem2/{build}.{release}.0123",
        "{results}/{name}/index/bwa-mem2/{build}.{release}.amb",
        "{results}/{name}/index/bwa-mem2/{build}.{release}.ann",
        "{results}/{name}/index/bwa-mem2/{build}.{release}.bwt.2bit.64",
        "{results}/{name}/index/bwa-mem2/{build}.{release}.pac"
    params:
        out_prefix="{results}/{name}/index/bwa-mem2/{build}.{release}"
    log:
        "{results}/{name}/logs/bwa-mem2.{build}.{release}.log"
    benchmark:
        "{results}/{name}/.benchmark/bwa-mem2.{build}.{release}.tsv"
    conda:
        "envs/bwa-mem2.yaml"
    resources:
        mem_gb=50
    shell:
        "bwa-mem2 index "
        "-p {params.out_prefix} "
        "{input} "
        ">{log} 2>&1 "

